{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Build Systems","text":"<p>I'm exploring Python Build Systems and the tools built around them and these are my notes.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#readings","title":"Readings","text":""},{"location":"resources/#videos","title":"Videos","text":""},{"location":"basics/","title":"Basics","text":""},{"location":"basics/#what-is-a-source-distribution","title":"What is a source distribution?","text":"<p>Source distribution: Glossary - Python Packaging User Guide</p>"},{"location":"basics/#what-is-a-binary-distribution","title":"What is a binary distribution?","text":"<p>Binary distribution: Glossary - Python Packaging User Guide</p>"},{"location":"basics/#what-is-a-wheel-distribution","title":"What is a wheel distribution?","text":"<p>What Are Python Wheels and Why Should You Care? \u2013 Real Python</p>"},{"location":"basics/#what-is-pyprojecttoml","title":"What is pyproject.toml?","text":"<p><code>pyproject.toml</code>: Glossary - Python Packaging User Guide</p>"},{"location":"basics/#what-is-requirementstxt","title":"What is requirements.txt?","text":"<p><code>requirements.txt</code> is a file that is used to define a project's dependencies.</p> <p>Checkout for more: Glossary - Python Packaging User Guide</p>"},{"location":"basics/#what-are-lock-files","title":"What are <code>*.lock</code> files?","text":"<p>Checkout: The purpose of a lock file - Packaging - Discussions on Python.org</p>"},{"location":"basics/#what-is-setuppy","title":"What is <code>setup.py</code>?","text":"<p>The setup.py file is at the heart of a Python project. It describes all the metadata about your project. There are quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. - Taken from Python Setup.py - Python Cheatsheet</p> <p>Copilet's says it's a script that automates the installation of a Python package. It is also used to create a source distribution and a binary distribution. <code>setup.py</code> is the traditional way of defining a package. <code>setup.cfg</code> and <code>pyproject.toml</code> are the new ways of defining a package.</p> <p>Project: Glossary - Python Packaging User Guide</p>"},{"location":"basics/#what-is-setupcfg","title":"What is <code>setup.cfg</code>?","text":"<p><code>setup.cfg</code>:</p> <p>Glossary - Python Packaging User Guide</p> <p>Packaging and distributing projects - Python Packaging User Guide</p>"},{"location":"poetry/","title":"Poetry","text":""},{"location":"poetry/#introduction","title":"Introduction","text":"<p>What is Poetry? It is a tool for dependency management and packaging in Python.</p>"},{"location":"setuptools/","title":"Setuptools","text":""},{"location":"setuptools/#introduction","title":"Introduction","text":"<p>What is setuptools? It is a package that is used to create a source distribution and a binary distribution.</p>"},{"location":"setuptools/#commands","title":"Commands","text":"<p>Installing from <code>setup.py</code> is a good idea before publishing to PyPI.</p> <pre><code>python setup.py .\n</code></pre> <p>or cd into the package directory and run the following command:</p> <pre><code>pip install .\n</code></pre> <p>Create a source distribution.</p> <pre><code>python setup.py sdist\n</code></pre> <p>Create a binary distribution.</p> <pre><code>python setup.py bdist\n</code></pre> <p>Create a wheel distribution.</p> <pre><code>python setup.py bdist_wheel\n</code></pre>"},{"location":"setuptools/#defining-a-package-with-a-setuppy-file","title":"Defining a Package with a <code>setup.py</code> File","text":"<p>A package is defined in the <code>setup.py</code> file. The <code>setup()</code> function is used to define the package.</p> <pre><code>from setuptools import setup\n\nsetup(\n    name='package_name',\n    version='0.0.1',\n    description='Package description.',\n    long_description='Package long description.',\n    author='Author name',\n    author_email='Author email',\n    url='Package URL',\n    packages=['package_name'],\n    install_requires=['package_name'],\n    classifiers=[\n        'Development Status :: 1 - Planning',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n    python_requires='&gt;=3.6',\n)\n</code></pre>"},{"location":"setuptools/#defining-a-package-with-a-setupcfg-file","title":"Defining a Package with a <code>setup.cfg</code> File","text":"<p>A package can also be defined in a <code>setup.cfg</code> file. The <code>setup()</code> function is used to define the package.</p>"},{"location":"setuptools/#defining-a-package-with-a-pyprojecttoml-file","title":"Defining a Package with a <code>pyproject.toml</code> File","text":""},{"location":"twine/","title":"twine","text":""},{"location":"twine/#install","title":"Install","text":"<pre><code>pipx install twine\n</code></pre>"},{"location":"twine/#usage","title":"Usage","text":""},{"location":"twine/#upload-a-package","title":"Upload a Package","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"twine/#upload-a-package-to-testpypi","title":"Upload a Package to TestPyPI","text":"<pre><code>twine upload --repository testpypi dist/*\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}